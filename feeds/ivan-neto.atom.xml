<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PythonClub - Ivan Neto</title><link href="http://pythonclub.com.br/" rel="alternate"></link><link href="http://pythonclub.com.br/feeds/ivan-neto.atom.xml" rel="self"></link><id>http://pythonclub.com.br/</id><updated>2016-04-22T23:00:00-03:00</updated><entry><title>Explicit is better than implicit</title><link href="http://pythonclub.com.br/explicit-is-better-than-implicit.html" rel="alternate"></link><published>2016-04-22T23:00:00-03:00</published><updated>2016-04-22T23:00:00-03:00</updated><author><name>Ivan Neto</name></author><id>tag:pythonclub.com.br,2016-04-22:/explicit-is-better-than-implicit.html</id><summary type="html">&lt;p&gt;Esse post não é diretamente relacionado a desenvolvimento com Python, mas conta a história de uma das muitas experiências que passamos desenvolvendo e mostra como a filosofia e o &lt;em&gt;mindset&lt;/em&gt; &lt;strong&gt;Python&lt;/strong&gt; podem nos influenciar a tomar decisões melhores.&lt;/p&gt;
&lt;h2&gt;Contexto geral&lt;/h2&gt;
&lt;p&gt;Atualmente trabalho remotamente pela Toptal, uma empresa de consultoria em …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Esse post não é diretamente relacionado a desenvolvimento com Python, mas conta a história de uma das muitas experiências que passamos desenvolvendo e mostra como a filosofia e o &lt;em&gt;mindset&lt;/em&gt; &lt;strong&gt;Python&lt;/strong&gt; podem nos influenciar a tomar decisões melhores.&lt;/p&gt;
&lt;h2&gt;Contexto geral&lt;/h2&gt;
&lt;p&gt;Atualmente trabalho remotamente pela Toptal, uma empresa de consultoria em &lt;em&gt;software&lt;/em&gt; com foco em trabalho remoto e que tem um processo seletivo bastante rígido para garantir uma qualidade acima da média para seus clientes (&lt;a href="https://www.toptal.com/#book-tested-programmers"&gt;saiba mais sobre a Toptal aqui&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;No time em que faço parte os papéis são bem definidos entre desenvolvedores &lt;em&gt;front-end&lt;/em&gt; e &lt;em&gt;back-end&lt;/em&gt; e faço parte da equipe de &lt;em&gt;back-end&lt;/em&gt;, que usa principalmente &lt;strong&gt;Django&lt;/strong&gt; nas aplicações. À medida que evoluímos e nos tornamos mais maduros como time, buscamos soluções que pudessem otimizar nosso processo de desenvolvimento.&lt;/p&gt;
&lt;p&gt;Atualmente utilizamos &lt;em&gt;CircleCI&lt;/em&gt; -- uma plataforma para integração e entrega contínuas -- para tarefas como rodar nossa suíte de testes, fazer a integração de nosso código, instanciar uma nova versão de nossos sistemas em um ambiente de &lt;em&gt;staging&lt;/em&gt; e criar imagens &lt;strong&gt;Docker&lt;/strong&gt; posteriormente colocadas em produção.&lt;/p&gt;
&lt;h2&gt;Melhorias&lt;/h2&gt;
&lt;p&gt;Nosso time constantemente reavalia processos, ferramentas e o resultado são discussões interessantes sobre como tornar nosso trabalho mais rápido e produtivo.&lt;/p&gt;
&lt;p&gt;Recentemente começamos a utilizar um servidor &lt;strong&gt;NPM&lt;/strong&gt; -- um dos mais usados gerenciadores de pacotes para &lt;strong&gt;Javascript&lt;/strong&gt; -- privado para uma melhor separação de pacotes &lt;em&gt;front-end&lt;/em&gt;, otimizando o tempo de &lt;em&gt;build&lt;/em&gt; de &lt;em&gt;assets&lt;/em&gt; de 47 para 25 segundos.&lt;/p&gt;
&lt;p&gt;Na raiz do nosso projeto temos um &lt;em&gt;package.json&lt;/em&gt; com o seguinte conteúdo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^1.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;front&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^1.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;core&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^1.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sendo que &lt;strong&gt;cat&lt;/strong&gt;, &lt;strong&gt;front&lt;/strong&gt; e &lt;strong&gt;core&lt;/strong&gt; (renomeados para exemplificar) são pacotes mantidos por nós mesmos no &lt;strong&gt;NPM&lt;/strong&gt; privado. Por padrão, se você lista o pacote com &lt;code&gt;“^”&lt;/code&gt; (como por exemplo acima &lt;code&gt;“^1.0.0”&lt;/code&gt;), o &lt;em&gt;npm&lt;/em&gt; considera apenas o número que representa a &lt;em&gt;major version&lt;/em&gt;, no caso o número 1, e fará o &lt;em&gt;download&lt;/em&gt; da última versão que começa com 1.&lt;/p&gt;
&lt;p&gt;Essa abordagem tem quatro pontos fracos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ela pode quebrar seu código. Se pacote de terceiro atualizar, seu código pode não estar preparado para lidar com as novas funcionalidades adicionadas, principalmente porque &lt;em&gt;libs&lt;/em&gt; evoluem tão rapidamente que se torna fácil acontecer uma atualização sem &lt;em&gt;backwards compatibility&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Você não sabe exatamente qual versão do pacote seu sistema está usando em produção. Para saber, você teria que acessar os servidores remotamente e executar o comando &lt;code&gt;npm list&lt;/code&gt;, por exemplo (poderia fazer localmente também mas existe a possibilidade de que no momento em que ocorreu o &lt;em&gt;deploy&lt;/em&gt;, aquele pacote estava em uma versão anterior à sua versão local).&lt;/li&gt;
&lt;li&gt;Você perde o controle de quando quer que seu sistema utilize a nova versão do pacote.&lt;/li&gt;
&lt;li&gt;Se você precisar fazer um &lt;em&gt;rollback&lt;/em&gt; ou usar uma imagem antiga de seu sistema em produção, ainda assim ela vai utilizar a última versão do pacote, o que pode levar a mais dores de cabeça.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Problema&lt;/h1&gt;
&lt;p&gt;Recentemente tivemos um &lt;em&gt;bug&lt;/em&gt; em produção, e uma mudança no pacote &lt;em&gt;core&lt;/em&gt; resolveria. &lt;strong&gt;O que fazer com o sistema principal?&lt;/strong&gt; Nada, não era necessária nenhuma alteração. Só precisaríamos gerar uma nova imagem &lt;em&gt;Docker&lt;/em&gt; que ela seria montada do zero e no momento de instalar os pacotes &lt;em&gt;npm&lt;/em&gt;, baixaria a última versão.&lt;/p&gt;
&lt;p&gt;Bastava realizar &lt;em&gt;rebuild&lt;/em&gt; na branch &lt;em&gt;master&lt;/em&gt; no &lt;strong&gt;CircleCI&lt;/strong&gt;, que assim que terminado ele trataria de enviar um &lt;em&gt;webhook&lt;/em&gt; para o nossa ferramenta que cria imagens &lt;em&gt;Docker&lt;/em&gt;. Nós utilizamos o seguinte padrão de nomenclatura dessas imagens:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;myapp-production-&amp;lt;branch&amp;gt;-&amp;lt;sha[:7]&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como não fizemos nenhuma alteração no sistema principal, o &lt;em&gt;branch&lt;/em&gt; e o &lt;em&gt;sha&lt;/em&gt; continuaram os mesmos.&lt;/p&gt;
&lt;p&gt;Resumindo, nosso &lt;em&gt;Docker&lt;/em&gt; recebeu um pedido de &lt;em&gt;build&lt;/em&gt; para aquela &lt;em&gt;branch&lt;/em&gt; e &lt;em&gt;sha&lt;/em&gt; e, por padrão, primeiro procurou em seu &lt;em&gt;cache&lt;/em&gt; de imagens se já existia alguma imagem pronta com aquele nome. O resultado foi que a mesma imagem, sem o &lt;em&gt;hotfix&lt;/em&gt;, foi para produção (pois ela havia sido criada antes e no momento em que baixou os pacotes &lt;em&gt;npm&lt;/em&gt; ainda não havia alterações no &lt;em&gt;core&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Demoramos um pouco para perceber o problema, mas o suficiente para resolvê-lo sem que &lt;em&gt;stakeholders&lt;/em&gt; percebessem.&lt;/p&gt;
&lt;h2&gt;Solução&lt;/h2&gt;
&lt;p&gt;Algum tempo depois discutimos e nós desenvolvedores &lt;em&gt;back-end&lt;/em&gt; sugerimos a seguinte solução:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;]&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;dependencies&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0.5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;front&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0.7&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;core&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.0.10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="err"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com essa abordagem:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Você pode fazer &lt;em&gt;rollback&lt;/em&gt; do seu código sem problemas pois o código antigo vai usar a versão antiga do pacote.&lt;/li&gt;
&lt;li&gt;Você tem controle sobre quando quer que seu sistema utilize a nova versão do pacote.&lt;/li&gt;
&lt;li&gt;Você sabe exatamente quais versões de pacotes seu sistema está utilizando, bastando abrir o &lt;em&gt;packages.json&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Caso uma nova versão quebre seu código, você pode voltar uma versão rapidamente até que o problema seja resolvido.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;O problema que tivemos em produção não aconteceria caso tivéssemos utilizado a abordagem acima. Assim que os pacotes fossem atualizados, criaríamos uma &lt;em&gt;pull request&lt;/em&gt; no repositório do sistema principal com as seguintes alterações:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff --git i/package.json w/package.json&lt;/span&gt;
&lt;span class="gh"&gt;index eaae10d..5aa773b 100644&lt;/span&gt;
&lt;span class="gd"&gt;--- i/package.json&lt;/span&gt;
&lt;span class="gi"&gt;+++ w/package.json&lt;/span&gt;
&lt;span class="gu"&gt;@@ -9,7 +9,7 @@&lt;/span&gt;
   &amp;quot;dependencies&amp;quot;: {
     &amp;quot;cat&amp;quot;: &amp;quot;1.0.5&amp;quot;,
     &amp;quot;front&amp;quot;: &amp;quot;1.0.7&amp;quot;,
&lt;span class="gd"&gt;-    &amp;quot;core&amp;quot;: &amp;quot;1.0.10&amp;quot;,&lt;/span&gt;
&lt;span class="gi"&gt;+    &amp;quot;core&amp;quot;: &amp;quot;1.0.11&amp;quot;,&lt;/span&gt;
   },
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Após o &lt;em&gt;merge&lt;/em&gt;, um novo &lt;em&gt;build&lt;/em&gt; aconteceria no &lt;strong&gt;CircleCI&lt;/strong&gt;, e um novo &lt;em&gt;sha&lt;/em&gt; seria enviado via &lt;em&gt;webhook&lt;/em&gt;. O &lt;em&gt;Docker&lt;/em&gt; não encontraria nenhuma imagem com essa combinação de &lt;em&gt;branch&lt;/em&gt; e &lt;em&gt;sha&lt;/em&gt; e criaria uma nova do zero. Produção teria o &lt;em&gt;hotfix&lt;/em&gt; e não haveria constrangimento.&lt;/p&gt;
&lt;p&gt;Os desenvolvedores &lt;em&gt;front-end&lt;/em&gt; não gostaram da ideia de ter que atualizar o arquivo toda vez que alguma dependência subisse de versão. Discutimos bastante e a última coisa que eu disse foi: &lt;strong&gt;“from the Zen of Python: explicit is better than implicit”&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Lição aprendida.&lt;/p&gt;</content><category term="python"></category><category term="zen of python"></category><category term="experências"></category><category term="decisões de desenvolvimento"></category></entry></feed>