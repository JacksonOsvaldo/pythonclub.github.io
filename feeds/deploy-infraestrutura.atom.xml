<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PythonClub - deploy-infraestrutura</title><link href="http://pythonclub.com.br/" rel="alternate"></link><link href="http://pythonclub.com.br/feeds/deploy-infraestrutura.atom.xml" rel="self"></link><id>http://pythonclub.com.br/</id><updated>2014-12-09T23:08:00-02:00</updated><entry><title>Integrando o Django com Cloudinary</title><link href="http://pythonclub.com.br/integrando-django-com-cloudinary.html" rel="alternate"></link><published>2014-12-09T23:08:00-02:00</published><updated>2014-12-09T23:08:00-02:00</updated><author><name>Dyesten Paulon</name></author><id>tag:pythonclub.com.br,2014-12-09:/integrando-django-com-cloudinary.html</id><summary type="html">&lt;h3&gt;O que é?&lt;/h3&gt;
&lt;p&gt;O Cloudinary é um serviço de gerenciamento de imagens e arquivos na nuvem, muito útil por exemplo para utilização junto ao Heroku, que não oferece o serviço de hospedagem de arquivos. Além de nos oferecer o serviço de hospedagem de imagens, o Cloudinary disponibiliza diversas manipulações, uso …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;O que é?&lt;/h3&gt;
&lt;p&gt;O Cloudinary é um serviço de gerenciamento de imagens e arquivos na nuvem, muito útil por exemplo para utilização junto ao Heroku, que não oferece o serviço de hospedagem de arquivos. Além de nos oferecer o serviço de hospedagem de imagens, o Cloudinary disponibiliza diversas manipulações, uso de efeitos, detecção facial e muitos outros recursos para as imagens enviadas.&lt;/p&gt;
&lt;h3&gt;O que é preciso?&lt;/h3&gt;
&lt;p&gt;Para iniciarmos é preciso se &lt;strong&gt;cadastrar&lt;/strong&gt; no site. O cadastro pode ser feito com uma conta gratuita limitada.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://cloudinary.com/users/register/free"&gt;Cadastro Gratuito&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;
Ao finalizar o cadastro, uma tela como a exibida abaixo estará disponível. Atenção nos itens Cloud name, API Key e API Secret, eles serão úteis mais adiante.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cadastro Cloudinary" src="/images/dyesten/cadastro_cloudinary.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Configurando o ambiente&lt;/h3&gt;
&lt;p&gt;A instalação do pacote pode ser feita via &lt;strong&gt;pip&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install cloudinary
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ou baixando o pacote pelo &lt;a href="https://pypi.python.org/pypi/cloudinary/1.0.18"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Configurando o settings&lt;/h3&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Obs.: focaremos apenas nas configurações do cloudinary.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Primeiramente no INSTALLED_APPS incluiremos a linha &lt;strong&gt;'cloudinary'&lt;/strong&gt; e a linha com nossa app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSTALLED_APPS = (
    &amp;#39;django.contrib.admin&amp;#39;,
    &amp;#39;django.contrib.auth&amp;#39;,
    &amp;#39;django.contrib.contenttypes&amp;#39;,
    &amp;#39;django.contrib.sessions&amp;#39;,
    &amp;#39;django.contrib.messages&amp;#39;,
    &amp;#39;django.contrib.staticfiles&amp;#39;,
    &amp;#39;cloudinary&amp;#39;,
    &amp;#39;cloudinary_example.core&amp;#39;,
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ainda no settings adicione ao seu arquivo os parâmetros de configuração do Cloudinary:&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&lt;em&gt;Obs.: estes parâmetros são os mesmo da imagem inicial. E os abaixo apresentados são apenas ficticios.&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CLOUDINARY = {
    &amp;#39;cloud_name&amp;#39; : seu_app_cloud,
    &amp;#39;api_key&amp;#39; : &amp;#39;00998877665544&amp;#39;,
    &amp;#39;api_secret&amp;#39;: &amp;#39;DBseuAPPAKI-mtb7ZklCCBuJNoNetp&amp;#39;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Models&lt;/h3&gt;
&lt;p&gt;Faremos a importação do Cloudinary e em seguida definiremos nossa classe &lt;strong&gt;'Imagens'&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudinary.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CloudinaryField&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Imagens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;imagem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CloudinaryField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;imagem&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;small&gt;&lt;em&gt;Obs.: execute o syncdb. No caso de utilização do South, acrescente o seguinte código:&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;south.modelsinspector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add_introspection_rules&lt;/span&gt;
&lt;span class="n"&gt;add_introspection_rules&lt;/span&gt;&lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;^cloudinary\.models\.CloudinaryField&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Forms&lt;/h3&gt;
&lt;p&gt;Agora vamos importar o modelo em nosso &lt;strong&gt;forms&lt;/strong&gt;, e definiremos nossa Classe em seguida:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudinary_example.core.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Imagens&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ImagensForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelForm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Imagens&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos criar o formulário para fazermos o upload das imagens.
Antes vamos definir uma rota para nossa &lt;strong&gt;views&lt;/strong&gt;, chamaremos ela de &lt;em&gt;'galeria'&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;urlpatterns = patterns(&amp;#39;cloudinary_example.core.views&amp;#39;,
    url(r&amp;#39;^galeria/$&amp;#39;, &amp;#39;galeria&amp;#39;, name=&amp;#39;galeria&amp;#39;),
)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Criaremos agora uma &lt;strong&gt;views&lt;/strong&gt; mais simples possível para chegar até nosso &lt;strong&gt;template&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudinary_example.core.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImagensForm&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;galeria&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_to_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;galeria.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ImagensForm&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora vamos criar nosso template &lt;em&gt;'galeria.html'&lt;/em&gt; com o seguinte código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;cloudinary&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    &amp;amp;lt;form action=&amp;quot;.&amp;quot; method=&amp;quot;post&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;csrf_token&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;amp;lt;table border=1 align=&amp;quot;center&amp;quot;&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;amp;lt;tr&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;amp;lt;td style=&amp;quot;padding:10px;margin:20px;&amp;quot;&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                    &amp;amp;lt;label for=&amp;quot;imagens&amp;quot;&amp;amp;gt;Imagens:&amp;amp;lt;/label&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;amp;lt;/td&amp;amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;                &amp;amp;lt;td style=&amp;quot;padding:10px;margin:20px;&amp;quot;&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                    &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;form.imagem&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;amp;lt;/td&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;amp;lt;/tr&amp;amp;gt;&lt;/span&gt;

&lt;span class="x"&gt;            &amp;amp;lt;tr align=&amp;quot;center&amp;quot;&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;amp;lt;td colspan=&amp;#39;2&amp;#39; style=&amp;quot;padding:10px;margin:20px;&amp;quot;&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                    &amp;amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Upload&amp;quot;&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;                &amp;amp;lt;/td&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;            &amp;amp;lt;/tr&amp;amp;gt;&lt;/span&gt;
&lt;span class="x"&gt;        &amp;amp;lt;/table&amp;amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Template Inicial" src="/images/dyesten/template_inicial.png"&gt;&lt;/p&gt;
&lt;p&gt;Legal mas nossa &lt;em&gt;views&lt;/em&gt; ainda não tem a ação para salvar a imagem no Cloudinary, agora vamos voltar e realizar a ação para salvar a imagem.
Primeiro vamos incluir as importações do nosso model.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudinary_example.core.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Imagens&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Vamos alterar nosso método &lt;em&gt;'galeria'&lt;/em&gt; para o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudinary_example.core.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ImagensForm&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudinary_example.core.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Imagens&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;galeria&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ImagensForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;galeria.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;ImagensForm&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, agora nossa imagem já pode ser salva no Cloudinary e nosso banco de dados. E como recuperar as imagens para exibição?
Neste exemplo vamos utilizar as mesma &lt;em&gt;views&lt;/em&gt; e o mesmo &lt;em&gt;template&lt;/em&gt; para exibição. Para isso vamos alterar nossa &lt;em&gt;views&lt;/em&gt; para buscar os id’s de nossas imagens salvos no banco, 
altere o seu return para o seguinte:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return render(request, &amp;#39;galeria.html&amp;#39;, {&amp;#39;form&amp;#39;:ImagensForm, &amp;#39;imgs&amp;#39;:Imagens.objects.all()})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Já em seu template, adicione o seguinte código:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;amp;lt;table align=&amp;quot;center&amp;quot;&amp;amp;gt;
    {% for img in imgs %}
        &amp;amp;lt;tr&amp;amp;gt;
            &amp;amp;lt;td&amp;amp;gt;{% cloudinary img.imagem %}&amp;amp;lt;/td&amp;amp;gt;
        &amp;amp;lt;/tr&amp;amp;gt;
    {% empty %}
        &amp;amp;lt;tr&amp;amp;gt;
            &amp;amp;lt;td&amp;amp;gt;Sem Itens na Lista&amp;amp;lt;/td&amp;amp;gt;
        &amp;amp;lt;/tr&amp;amp;gt;
    {% endfor %}
&amp;amp;lt;/table&amp;amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Com apenas este código acima, é possível buscarmos as imagens assim que carregadas.&lt;/p&gt;
&lt;p&gt;Alguns detalhes importantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A tag {% cloudinary img.imagem %} é equivalente a uma tag html &lt;img&gt;:&lt;/p&gt;
&lt;p&gt;&lt;small&gt;&amp;lt;_img src="http://res.cloudinary.com/suapasta/image/upload/v001122334455/codigodasuaimagem.jpg"&amp;gt;&lt;/small&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Se é uma tag HTML, podemos utiliza-la sempre assim? A resposta é utilize a que se sentir mais confortável, não há qualquer problema.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Alguns parâmetros podem ser adicionados a sua tag, como por exemplo, height, width, crop e muitos outros:&lt;/p&gt;
&lt;p&gt;{% cloudinary img.imagem height=500 width=400 crop="fill" %}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consulte a &lt;a href="http://cloudinary.com/documentation/django_image_manipulation"&gt;documentação&lt;/a&gt; para mais exemplos de manipulação.&lt;/p&gt;
&lt;h3&gt;Extra&lt;/h3&gt;
&lt;p&gt;E como carregar múltiplos arquivos? O Django e Cloudinary te dão suporte total a essa ação de forma simples.&lt;/p&gt;
&lt;p&gt;Vamos começar alterando nosso &lt;strong&gt;forms&lt;/strong&gt;. Primeiro adicionaremos a importação da biblioteca do Cloudinary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudinary.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CloudinaryJsFileField&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em seguida, incluiremos após a class meta a linha que indica que nosso campo file input deve ser multiple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;imagem = CloudinaryJsFileField( attrs={&amp;#39;multiple&amp;#39;: 1, &amp;#39;name&amp;#39;:&amp;#39;imagens&amp;#39;} )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E nossa view sofre uma pequena alteração para percorrer os itens do request Files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def galeria(request):
    if request.method == &amp;#39;POST&amp;#39;:
        form = ImagensForm(request.POST, request.FILES)
        for f in request.FILES.getlist(&amp;#39;imagens&amp;#39;):
            Imagens(imagem=f).save()

    return render(request, &amp;#39;galeria.html&amp;#39;, {&amp;#39;form&amp;#39;:ImagensForm, &amp;#39;imgs&amp;#39;:Imagens.objects.all()})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tudo pronto, agora já temos um galeria simples. 
O código está disponível no &lt;a href="https://github.com/dyesten/cloudinary_example/"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content><category term="Django"></category><category term="Cloudinary"></category><category term="Heroku"></category></entry><entry><title>Publicação de projetos com o Django-Fagungis</title><link href="http://pythonclub.com.br/deploy-com-django-fagungis.html" rel="alternate"></link><published>2014-05-13T16:00:00-03:00</published><updated>2014-05-13T16:00:00-03:00</updated><author><name>Rômulo Collopy</name></author><id>tag:pythonclub.com.br,2014-05-13:/deploy-com-django-fagungis.html</id><summary type="html">&lt;h2&gt;Django-Fagungis&lt;/h2&gt;
&lt;h3&gt;O que é?&lt;/h3&gt;
&lt;p&gt;Django-Fagungis é um projeto original do &lt;a href="http://github.com/dnx"&gt;Denis Darii&lt;/a&gt;, &lt;a href="https://pypi.python.org/pypi/django-fagungis/0.0.17"&gt;disponível no Pypi para instalação via pip&lt;/a&gt;. A idéia do projeto é simples: automatizar o deploy de projetos Django para servidores com acesso root, utilizando o &lt;a href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt;, uma biblioteca e ferramenta de linha de comando em Python (2 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Django-Fagungis&lt;/h2&gt;
&lt;h3&gt;O que é?&lt;/h3&gt;
&lt;p&gt;Django-Fagungis é um projeto original do &lt;a href="http://github.com/dnx"&gt;Denis Darii&lt;/a&gt;, &lt;a href="https://pypi.python.org/pypi/django-fagungis/0.0.17"&gt;disponível no Pypi para instalação via pip&lt;/a&gt;. A idéia do projeto é simples: automatizar o deploy de projetos Django para servidores com acesso root, utilizando o &lt;a href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt;, uma biblioteca e ferramenta de linha de comando em Python (2.5-2.7) que usa o protocolo SSH para o deploy de aplicações e realização de tarefas administrativas no sistema, não restrita a projetos Python.&lt;/p&gt;
&lt;p&gt;Porém, nesse artigo, &lt;strong&gt;não vamos usar a versão original do Django-Fagungis&lt;/strong&gt;. Em vez dela, &lt;strong&gt;usaremos um fork&lt;/strong&gt; feito por &lt;a href="https://github.com/damianmoore/"&gt;Damian Moore&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Por isso, a instalação não será feita diretamente pelo pip, mas pelo repositório do Damian, em &lt;a href="https://github.com/damianmoore/django-fagungis"&gt;https://github.com/damianmoore/django-fagungis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install git+https://github.com/damianmoore/django-fagungis.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pediu a senha de root? Que tal criar um virtualenv primeiro?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Atualmente, trabalho mais com Python3 que com Python2, porém o Fabric ainda não foi completamente portado para o Python3, por isso, sempre crio um virtualenv para trabalhar com ele.&lt;/p&gt;
&lt;p&gt;No caso do Django-Fagungis creio que você tem um argumento a mais para usar um virtualenv: existem forks mais atuais que o projeto disponóvel no pip e possivelmente você vai querer testar diferentes versões.&lt;/p&gt;
&lt;h3&gt;Então, vamos ao passo a passo.&lt;/h3&gt;
&lt;p&gt;Digamos que você queira criar um projeto chamado simpleproject, em Python3, em um virtualenv. (Eu vou usar ~/dev/simpleproject).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir -p ~/dev/simpleproject.com
cd ~/dev/simpleproject
pip install --upgrade virtualenv
virtualenv --unzip-setuptools --python=/usr/bin/python3.4 .
source bin\activate
pip install django
django-admin.py startproject simpleproject .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Oops&lt;/strong&gt;, temos um problema, pois o fabric não suporta o Python3. Então criamos outro virtualenv para o django-fagungis. Você pode fazer isso em qualquer lugar. Nesse exemplo vou instalar em:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/dev/tools/django-fagungis-damianmoore&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Notem que deixei o nome do usuário github na pasta para lembrar que estou usando um fork.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Agora vou até a pasta e crio o virtualenv com Python2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;deactivate
mkdir -p ~/dev/tools/django-fagungis-damianmoore
cd ~/dev/tools/django-fagungis-damianmoore
virtualenv --unzip-setuptools --python=/usr/bin/python2.7 .
source bin\activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Pode ser que você não precise dizer o caminho do executável do python para a versão 2.7&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;E instalo o django-fagungis::&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install git+https://github.com/damianmoore/django-fagungis.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E copio o fabfile.py de exemplo para meu projeto:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp ~/dev/tools/django-fagungis-damianmoore/lib/python2.7/site-packages/fagungis/example_fabfile.py ~/dev/simpleproject/fabfile.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Feito isso, podemos voltar ao projeto e editar o fabfile para as configurações do seu projeto. A configuração é bem simples e o arquivo é autoexplicativo.&lt;/p&gt;
&lt;p&gt;Seu projeto deverá estar em um repositório, seja ele no bitbicket, github, ou qualquer lugar onde seu servidor possa acessá-lo (e com as devidas permissões). Nesse caso, vou supor que seu projeto está no github:&lt;/p&gt;
&lt;p&gt;Mude
&lt;code&gt;def example():&lt;/code&gt; para &lt;code&gt;def simpleproject():&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;E as variáveis env.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;env.project = &amp;#39;simpleproject_production&amp;#39;
env.repository = &amp;#39;https://github.com/seu-username/simpleproject.git&amp;#39;
env.repository_type = &amp;#39;git&amp;#39;
env.hosts = [&amp;#39;root@simpleproject.org&amp;#39;, ]
env.additional_packages = [&amp;#39;git-core&amp;#39;,]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Agora, algumas configurações mais sensíveis:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O Django e o Nginx têm um tratamento particular para a url static, por isso a automatixação fica mais fácil se você não usar essa url no seu projeto.&lt;/p&gt;
&lt;p&gt;Dê preferência para usar configurações como a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#  django media url and root dir
env.django_media_url = &amp;#39;/media/&amp;#39;
env.django_media_root = env.code_root
#  django static url and root dir
env.django_static_url = &amp;#39;/assets/&amp;#39;
env.django_static_root = env.code_root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E, em seu settings.py &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unipath&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;

&lt;span class="c1"&gt;#...&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/assets/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;assets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Se você escolheu usar Python3&lt;/strong&gt; no seu projeto, adicione o path para o python3 no virtenv_options&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;env.virtenv_options = [&amp;#39;distribute&amp;#39;, &amp;#39;no-site-packages&amp;#39;,&amp;#39;python=/usr/bin/python3&amp;#39;, ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Estamos com tudo quase pronto. Você já pode tentar o deploy do seu projeto, mas para isso terá que ativar o virtualenv onde instalou o django-fagungis. Como esse processo é um pouco chato, criei um script para fazer isso e voltar para o seu projeto. &lt;/p&gt;
&lt;p&gt;Crie um arquivo fagungis.sh e grave na pasta onde ele está instalado (&lt;code&gt;~/dev/tools/django-fagungis-damianmoore&lt;/code&gt; em nosso caso)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SCRIPT_NAME=&amp;quot;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASH_SOURCE&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;&amp;quot;
SCRIPT_DIR=&amp;quot;$( dirname &amp;quot;&lt;span class="nv"&gt;$SCRIPT_NAME&lt;/span&gt;&amp;quot; )&amp;quot;

source &lt;span class="nv"&gt;$SCRIPT_DIR&lt;/span&gt;/bin/activate
fab $1 $2

PROJECT=&amp;quot;$(cd $(dirname $0) &lt;span class="ni"&gt;&amp;amp;amp;&amp;amp;amp;&lt;/span&gt; pwd)&amp;quot;
source &lt;span class="nv"&gt;$PROJECT&lt;/span&gt;/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;E em seu .bashrc, adicione um alias para ele:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; alias fagungis=&amp;#39;~/dev/tools/django-fagungis-damianmoore/fagungis.sh&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Agora é só ir até a raiz do seu projeto, onde está salvo o fabfile.py e digitar:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fagungis simpleproject setup
fagungis simpleproject deploy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;lembre-se que para as mudanças no .bashrc terem efeito, você deverá recarregá-lo com&lt;/strong&gt; &lt;code&gt;source ~/.bashrc&lt;/code&gt; &lt;strong&gt;ou reabrir a janela do terminal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Se tudo correu certo, seu projeto já está rodando no servidor. Mas em alguns casos o &lt;a href="http://docs.gunicorn.org/en/latest/run.html"&gt;Gunicorn&lt;/a&gt; tem um problema com a sintaxe antiga e você precisa ir no pacote do fagungis e mudar o último exec do script: &lt;code&gt;~/dev/tools/django-fagungis-damianmoore/lib/python2.7/site-packages/fagungis/scripts/rungunicorn.sh&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A chamada do gunicorn deve ficar assim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;exec %(virtenv)s/bin/gunicorn -w %(gunicorn_workers)s \
    --user=%(django_user)s --group=%(django_user_group)s \
    --settings=%(django_project_settings)s \
    --bind=%(gunicorn_bind)s --log-level=%(gunicorn_loglevel)s \
    --log-file=%(gunicorn_logfile)s 2&amp;amp;gt;&amp;amp;gt;%(gunicorn_logfile)s \
    %(project)s.wsgi:application
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Salve o arquivo e tente de novo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fagungis simpleproject setup
fagungis simpleproject deploy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se seu projeto Django tem a configuração simples, deve estar tudo funcionando. Não esqueça que se você usar pacotes como &lt;a href="https://pypi.python.org/pypi/python-decouple"&gt;python_decouple&lt;/a&gt;, deverá enviar o settings.ini para a pasta do projeto no servidor. &lt;/p&gt;
&lt;p&gt;O Django-Fagungis não cria automaticamente seu servidor de banco de dados, então ainda te resta esssa tarefa, caso ele fique no mesmo servidor do seu projeto. Mas isso fica para um próximo artigo do PythonClub.&lt;/p&gt;</content><category term="Django"></category><category term="Fabric"></category><category term="Gunicorn"></category><category term="Nginx"></category><category term="Supervisor"></category><category term="Deploy"></category><category term="django-fagungis"></category></entry></feed>